pipeline {
    agent any

    parameters {
        string(name: 'BASE_URL', defaultValue: 'https://parabank.parasoft.com', description: 'Environment URL')
    }

    options {
        timestamps()
        timeout(time: 45, unit: 'MINUTES') // Max build time
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    environment {
        MAX_BUILD_TIME_MINUTES = 30
        RETRY_COUNT = 2
    }

    stages {
        stage('Environment Setup') {
            steps {
                script {
                    echo "ðŸ”§ Setting up environment for URL: ${params.BASE_URL}"
                    bat 'if not exist cypress\\reports mkdir cypress\\reports'
                    bat 'npm install --legacy-peer-deps'
                }
            }
        }

        stage('Smart Test Selection') {
            steps {
                script {
                    // Determine day of week
                    def day = new Date().format('u', TimeZone.getTimeZone('Asia/Kuala_Lumpur')).toInteger()
                    def testSuite = ''
                    
                    if (day >= 1 && day <= 5) {
                        echo "ðŸ“… Weekday detected: Running SMOKE tests only"
                        testSuite = 'smoke'
                    } else {
                        echo "Weekend detected: Running FULL regression"
                        testSuite = 'full'
                    }

                    env.TEST_SUITE = testSuite
                    echo "Selected Test Suite: ${testSuite}"
                }
            }
        }

        stage('Test Execution') {
            steps {
                script {
                    def attempt = 0
                    def testPassed = false
                    def startTime = System.currentTimeMillis()

                    while (attempt <= env.RETRY_COUNT.toInteger() && !testPassed) {
                        try {
                            if (attempt > 0) {
                                echo Retry attempt ${attempt} for ${env.TEST_SUITE} tests"
                            }

                            echo "Running ${env.TEST_SUITE} tests..."
                            
                            def cypressCommand = "npx cypress run --browser chrome --config baseUrl=${params.BASE_URL} --reporter junit --reporter-options mochaFile=cypress/reports/${env.TEST_SUITE}-[hash].xml,toConsole=true --env grepTags=${env.TEST_SUITE}"
                            bat cypressCommand

                            // Check for report
                            def reportExists = bat(script: 'dir cypress\\reports\\*.xml /b 2>nul', returnStatus: true)
                            if (reportExists == 0) {
                                echo "Tests completed successfully"
                                testPassed = true
                            } else {
                                throw new Exception("Test report not found, marking as failed")
                            }

                            // Skip non-critical tests if build exceeds MAX_BUILD_TIME
                            def elapsedMinutes = (System.currentTimeMillis() - startTime) / 60000
                            if (elapsedMinutes > env.MAX_BUILD_TIME_MINUTES.toInteger()) {
                                echo "Build exceeded ${env.MAX_BUILD_TIME_MINUTES} minutes, skipping non-critical tests"
                                break
                            }

                        } catch (Exception e) {
                            attempt++
                            echo e.getMessage()
                            if (attempt > env.RETRY_COUNT.toInteger()) {
                                currentBuild.result = 'UNSTABLE'
                                echo "All retry attempts exhausted"
                            } else {
                                sleep(time: 5, unit: 'SECONDS')
                            }
                        }
                    }
                }
            }
        }

        stage('Generate Reports') {
            steps {
                script {
                    echo "Publishing test reports..."
                    junit 'cypress/reports/*.xml'
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up temporary files..."
                    bat 'rmdir /s /q cypress\\downloads 2>nul || echo No downloads to clean'
                    bat 'del /q cypress\\reports\\*.xml 2>nul || echo No old XML reports to delete'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully"
        }
        unstable {
            echo "Some tests failed, check reports"
        }
        failure {
            echo "Pipeline failed"
        }
        always {
            echo "Pipeline finished at ${new Date()}"
        }
    }
}
